name: Test-SSL
on: push

jobs:
  codestyle:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pycodestyle
      - name: Run Python PEP8 code style checks
        run: pycodestyle

  pylint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox pylint
      - name: Run Tox (pylint)
        run: tox -e pylint

  unit:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: [3.7]

    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: Run Tox
        run: tox -e unit

  integration:
    runs-on: ubuntu-latest

    services:
      db_test: # This will be the hostname
        image: postgres:11
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_SSL: on
          POSTGRES_SSL_CERT_FILE: /var/lib/postgresql/server.crt
          POSTGRES_SSL_KEY_FILE: /var/lib/postgresql/server.key
          POSTGRES_SSL_CA_FILE: /var/lib/postgresql/root.crt
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
        volumes:
          - ./certs:/certs

    strategy:
      matrix:
        python-version: [3.7]
        golang-version: ["^1.14.5"]

    env:
      MF_METADATA_DB_HOST: db_test
      MF_METADATA_DB_PORT: 5432
      MF_METADATA_DB_USER: test
      MF_METADATA_DB_PSWD: test
      MF_METADATA_DB_NAME: test
      MF_METADATA_DB_SSL_MODE: require

    steps:
      - uses: actions/checkout@v2
      - name: Generate SSL certificates
        run: |
          openssl req -new -x509 -days 365 -nodes -out /certs/server.crt -keyout /certs/server.key -subj "/CN=localhost"
          openssl req -new -x509 -days 365 -nodes -out /certs/root.crt -keyout /certs/root.key -subj "/CN=localhost"
          cat /certs/root.crt >> /certs/server.crt
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.golang-version }}
      - name: Install goose migration tool
        run: go install github.com/pressly/goose/v3/cmd/goose@v3.5.3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Python ${{ matrix.python-version }} dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install tox
      - name: Add required test DB alias name for localhost
        run: echo "127.0.0.1 db_test" | sudo tee -a /etc/hosts
      - name: Run Tox
        run: tox -v -e integration
